{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Welcome to the documentation of the Creation of Game Society's infrastructure!</p>"},{"location":"#navigation","title":"Navigation","text":"<p>A table of contents is available on the left side of the site. You can use the search bar on the top-left to search for specific pages.</p>"},{"location":"#contents","title":"Contents","text":"<ul> <li>New Webmaster Orientation</li> <li>Documentation</li> <li>Website</li> <li>Backend</li> <li>Discord Bot</li> <li>Music Bot</li> <li>DevOps</li> </ul>"},{"location":"documentation/","title":"Documentation","text":"<p>The documentation is written using MkDocs and hosted on GitHub Pages. It also uses Material for MkDocs for the general theming of the docs site.</p>"},{"location":"documentation/#contributing","title":"Contributing","text":"<ol> <li> <p>To edit the documentation it you'll need Python</p> </li> <li> <p>Install mkdocs-material with:    <code>pip install mkdocs-material</code></p> </li> <li> <p>Running the documentation locally</p> <pre><code>&gt; mkdocs serve\n</code></pre> </li> <li> <p>The documentation automatically builds and deploys to GitHub Pages when you push to the main branch.</p> </li> </ol>"},{"location":"new_webmaster/","title":"New Webmaster Guide","text":""},{"location":"new_webmaster/#overview","title":"Overview","text":"<p>This documentation will assume you have prerequisite knowledge of frameworks being used, therefore teaching is out of the scope of this site. However, there will be recommended reading sections at the start of each section to give an entry point to learning a new topic.</p> <p>For the ease of learning and consistency, all COGS infrastructure projects are written in TypeScript. Please check out the TypeScript documentation if you are unfamiliar with the language.</p>"},{"location":"new_webmaster/#tools","title":"Tools","text":"<p>It's recommended to use VSCode to develop since many extensions are available to assist you.</p>"},{"location":"new_webmaster/#code-formatting","title":"Code Formatting","text":"<p>We also use Prettier to automatically format our code. If you're using VSCode you can install the Prettier extension. You should configure the extension to format your code on save, so the code always retains the same formatting. This can be done by turning on the <code>editor.formatOnSave</code> setting in VSCode.</p>"},{"location":"new_webmaster/#version-control","title":"Version Control","text":"<p>We use Git for version control, with repositories hosted on GitHub. If you are unfamiliar with Git or GitHub you should check out the following tutorials:</p> <ul> <li>Learning Git Branching</li> <li>Introduction to GitHub</li> </ul>"},{"location":"new_webmaster/#rucogs-infrastructure","title":"RUCOGS Infrastructure","text":"<p>The <code>rucogs-infrastructure</code> repository is a mono-repo that contains all infrastructure projects as submodules. We recommend git cloning the <code>rucogs-infrastructure</code> mono-repo and develop within the submodule folders of this mono-repo. This is because there are some scripts in each project that attempt to copy shared data from one project to another, and these scripts assume you are running the script in a submodule within the <code>rucogs-infrastructure</code> repository.</p> <p>To clone the rucogs-infrastructure repository, run</p> <pre><code>&gt; git clone https://github.com/rucogs/rucogs-infrastructure\n</code></pre> <p>Since Git doesn't download submodules when you clone it, you must then initialize the submodules using</p> <pre><code>&gt; git submodule update --init\n</code></pre> <p>If you ever need to update the submodules to their latest versions from their source repositories, run</p> <pre><code>&gt; git submodule update --remote\n</code></pre>"},{"location":"new_webmaster/#contributing","title":"Contributing","text":"<p>Please submit pull requests to the GitHub project for new changes. After submitting a pull request, you can await reviewing from an existing Webmaster. Once you are familiar with the code base, you will be given commit access to the repository. However, it's still recommended to get another set of eyes to review big changes such as new features, etc.</p> <p>If the pull request changes features documented in the documentation, please also submit a pull request to the documentation repository to ensure it's up to date.</p>"},{"location":"new_webmaster/#next-steps","title":"Next Steps","text":"<p>You can start reading the various parts of the documentation, as well as do tutorials for the various frameworks to familiarize yourself with the codebase. The best way to learn is through small projects, so don't be afraid to create a tiny Angular project or Discord bot to play around with the frameworks used.</p>"},{"location":"backend/","title":"Backend","text":""},{"location":"backend/#recommended-reading","title":"Recommended Reading","text":"<ul> <li>Node.js Tutorial for Beginners</li> <li>What is an ORM?</li> <li>Typetta Documentation</li> <li>Learn GraphQL</li> <li>Apollo GraphQL Documentation</li> </ul>"},{"location":"backend/#overview","title":"Overview","text":"<p>The backend is built on Node.JS, Typetta, and MongoDB using TypeScript. This uses GraphQL for communication with our various frontends, like our website, discord bot, etc. Like all of our other projects, it's written in TypeScript.</p> <p>Tools:</p> <ul> <li>MongoDB - Our database.</li> <li>GraphQL - An alternative communication method to REST, that allows users of the API to query exactly the data they need.</li> <li>Apollo GraphQL - A GraphQL client/server library</li> <li>Typetta - A TypeScript ORM. We use Typetta to connect and interact with our MongoDB database. Typetta automatically creates a GraphQL endpoint, and provides per-column security on queries sent to that endpoint.</li> <li>Node.JS - An asynchronous event-driven JavaScript runtime that lets you build network applications.</li> <li>Express.JS - A web server framework for Node.JS</li> </ul>"},{"location":"backend/#contents","title":"Contents","text":"<ul> <li>Config</li> <li>Structure</li> </ul>"},{"location":"backend/config/","title":"Config","text":"<p>The behavior of the server is determined by config files located underneath <code>src/config</code>. Config files end in <code>.config.json</code>, and are automatically ignored by the repository's <code>.gitignore</code> to avoid leaking sensitive information into the git commit history.</p> <p>There are two config files needed:</p> <ul> <li><code>auth.config.json</code></li> <li><code>server.config.json</code></li> </ul> <p>The repository provides templates files ending in <code>.config.template.json</code> for the two types of config files. To make a real config file, duplicate a template and remove the <code>.template</code> part of the config file's name.</p>"},{"location":"backend/config/#auth-config","title":"Auth config","text":"<ul> <li><code>type</code> - The type of server this config file is for. It can be set to either <code>\"production\"</code> or <code>\"debug\"</code>. If you are using <code>\"debug\"</code>, make sure to also name the config as <code>auth.debug.config.json</code>.</li> <li><code>rootUsers</code> - An array of root users that can have complete access to the backend.<ul> <li>Users are objects with a <code>username</code> and a <code>password</code>.</li> </ul> </li> <li><code>jwt</code> - Settings for JSON web tokens. We use JSON web tokens for authentication<ul> <li><code>secret</code> - A string used to sign a JSON web token. This can be set to anything, but must be kept a secret.</li> </ul> </li> <li><code>oauth</code> - Settings for authentication<ul> <li><code>discord</code> - Settings for discord authentication.<ul> <li><code>strategyConfig</code><ul> <li><code>clientID</code> - Discord OAuth client ID. You can find this on the Discord developers dashboard on the COGS discord account.</li> <li><code>clientSecret</code> - Discord OAuth client secret. You ask an existing webmaster for the secret.</li> </ul> </li> </ul> </li> <li><code>google</code> - Settings for google authentication. Even though Google login functionality is implemented in both the backend and the frontend, it is currently unused in favor of only having Discord authentication. Therefore, filling out the google settings is optional.<ul> <li><code>strategyConfig</code><ul> <li><code>clientID</code> - Google OAuth client ID. You can find this on the Google developer dashboard on the COGS google account.</li> <li><code>clientSecret</code> - Google OAuth client secret. You ask an existing webmaster for the secret.</li> </ul> </li> </ul> </li> </ul> </li> </ul>"},{"location":"backend/config/#server-config","title":"Server Config","text":"<ul> <li><code>type</code> - The type of server this config file is for. It can be set to either <code>\"production\"</code> or <code>\"debug\"</code>. If you are using <code>\"debug\"</code>, make sure to also name the config as <code>server.debug.config.json</code>.</li> <li><code>mongoDB</code> - MongoDB settings<ul> <li><code>url</code> - Connection string to MongoDB database.</li> <li><code>dbName</code> - Name of the database. For production it should be <code>maindb</code>.</li> </ul> </li> <li><code>nodemailer</code> - Nodemailer settings. See the Nodemailer section for more information.</li> <li><code>backendDomain</code> - The domain for the backend.</li> <li><code>frontendDomain</code> - The domain for the frontend.</li> </ul>"},{"location":"backend/config/#nodemailer","title":"Nodemailer","text":"<p>For debugging purposes you can use a free platform like mailtrap to preview emails.</p> <pre><code>\"nodemailer\":\n    {\n        \"host\": \"smtp.mailtrap.io\",\n        \"auth\": { \"user\": \"\", \"pass\": \"\" },\n        \"port\": 2525,\n    }\n</code></pre> <p>For the release config you can use Gmail transport settings, so the emails are sent using our no-reply Gmail account:</p> <pre><code>\"nodemailer\":\n    {\n        \"service\": \"Gmail\",\n        \"auth\": { \"user\": \"rutgerscogsnoreply@gmail.com\", \"pass\": \"\" },\n    }\n</code></pre>"},{"location":"backend/structure/","title":"Structure","text":""},{"location":"backend/structure/#folder-structure","title":"Folder Structure","text":"<ul> <li><code>src</code> - Contains<ul> <li><code>server.ts</code> - The entry point of the backend. It reads the command line arguments or environment variables to start a server in development or production mode.</li> <li><code>config</code> - Stores config files that change how the backend runs. See the Config section for more information</li> <li><code>_tools</code> - Contains code used by Node.JS scripts defined in our <code>package.json</code>.</li> <li><code>controllers</code> - Contains \"controllers\" which are scripts or folders of scripts that perform certain functionality. This is a more structured version of <code>utils</code> and <code>misc</code> folders.</li> <li><code>generated</code> - Auto-generated code based on our GraphQL schema</li> <li><code>graphql</code> - Contains the GraphQL schema defined in TypeScript</li> <li><code>middlewares</code> - Middleware for Typetta</li> <li><code>misc</code> - Contains miscellaneous helper code</li> <li><code>routes</code> - Contains all the routes in the backend. Note that accessing data is done by Apollo server's GraphQL endpoint, rather than through manually configured routes.</li> <li><code>shared</code> - Code that's shared between the backend and frontends</li> <li><code>utils</code> - Utility code.</li> </ul> </li> <li><code>dist</code> - Where the release version of the backend is stored once you build it.</li> <li><code>gulpfile.js</code> - Script that automates copying assets over when you build the backend.</li> <li><code>rucogs.service</code> - Service file for hosting backend. See DevOps/Hosting for more information.</li> <li><code>tsconfig.json</code> - Configuration for TypeScript</li> <li><code>typetta.yml</code> - Configuration for Typetta</li> </ul>"},{"location":"backend/structure/#nodejs-scripts","title":"NodeJS Scripts","text":"<ul> <li><code>start</code> - Runs the built backend from the <code>dist</code> folder.</li> <li><code>start:recompile</code> - Compiles the backend and then runs it.</li> <li><code>start:rebuild</code> - Regenerates and recompiles the backend, and then runs it.</li> <li><code>mock</code> - Runs a mock server with dummy data from the <code>dist/_tools</code> folder</li> <li><code>mock:recompile</code> - Recompiles the backend and runs it with dummy data.</li> <li><code>tools</code> - Runs the server in tool mode<ul> <li>Tool mode is used at the moment to automatically generate a GraphQL TypeScript typings from the running Apollo server. The generated files are placed under the <code>src/generated</code> folder.</li> </ul> </li> <li><code>tools:recompile</code> - Recompiles the backend and runs it in tool mode</li> <li><code>generate</code> - Generates Typetta and GraphQL typings.</li> <li><code>generate:typetta</code> - Generates Typetta typings.</li> <li><code>generate:graphql-endpoint</code> - Generates typings for our GraphQL endpoint.</li> <li><code>compile:app</code> - Cleans the <code>dist</code> directory and recompiles the backend.</li> <li><code>compile:tools</code> - Cleans the <code>dist</code> directory and recompile the backend in tool mode, which basically includes the <code>src/_tools</code> folder in the final build.</li> <li><code>tidy uploads</code> - Removes unused user-uploaded images and assets from the <code>uploads</code> folder.</li> <li><code>clean</code> - Deletes the <code>dist</code> directory</li> <li><code>build</code> - Cleans the <code>dist</code> directory, regenerates the autogenerated code, and then recompiles the backend.</li> <li><code>pretty</code> - Run the prettier formatter on the TypeScript files within <code>src</code>.</li> </ul> <p>Note</p> <p>To run a NodeJS script you have to run the follow code inside the repository's directory.</p> <pre><code>&gt; npm run script_name\n</code></pre>"},{"location":"devops/","title":"DevOps","text":""},{"location":"devops/#overview","title":"Overview","text":"<p>Developer Operations, or DevOps for short, covers the maintenance of software. This section will cover the operational side of the COGS infrastructure, including how we host it, where we host it, how we use continuous integration, and how to access the database.</p>"},{"location":"devops/#contents","title":"Contents","text":"<ul> <li>Hosting<ul> <li>Service Management</li> <li>NGINX<ul> <li>Let's Encrypt</li> </ul> </li> </ul> </li> <li>Database</li> <li>Continuous Integration/Deployment<ul> <li>Website</li> <li>Backups</li> </ul> </li> </ul>"},{"location":"devops/ci_cd/","title":"CI/CD","text":""},{"location":"devops/ci_cd/#recommended-reading","title":"Recommended Reading","text":"<ul> <li>Understanding GitHub Actions</li> </ul>"},{"location":"devops/ci_cd/#overview","title":"Overview","text":"<p>Continuous integration and deployment is the process of automatically running unit tests and building/deploying software. We only use GitHub Actions at the moment to automate deployment of the website as well as perform weekly backups.</p>"},{"location":"devops/ci_cd/#website","title":"Website","text":"<p>We use this for our website, since it's hosted on GitHub Pages. Inside our <code>rucogs.github.io</code> repository, we have <code>.github/workflows/gh-pages-deployment.yml</code> workflow show below. This workflow automatically builds and deploys the website to GitHub Pages any time there is a commit made to the <code>main</code> branch.</p> <pre><code>name: Deploy to GitHub Pages\n\non:\n    push:\n        branches:\n            - main\n\njobs:\n    build:\n        runs-on: ubuntu-latest\n        steps:\n            - name: Checkout\n              uses: actions/checkout@v2 # If you're using actions/checkout@v2 you must set persist-credentials to false in most cases for the deployment to work correctly.\n              with:\n                  persist-credentials: false\n            - name: Use Node.js (Latest)\n              uses: actions/setup-node@v2\n              with:\n                  node-version: \"14\"\n                  check-latest: true\n            - name: Build\n              run: |\n                  npm install -g @angular/cli\n                  npm install\n                  npm run build\n                  cp dist/index.html dist/404.html\n            - name: Deploy\n              uses: JamesIves/github-pages-deploy-action@v4.2.5\n              with:\n                  branch: gh-pages # The branch the action should deploy to.\n                  folder: dist # The folder the action should deploy.\n</code></pre>"},{"location":"devops/ci_cd/#backups","title":"Backups","text":"<p>We also use GitHub Actions to automate backups of both the database and users' uploaded files. Inside our <code>rucogs-infrastructure-backup</code> repository, we have <code>.github/workflows/actions.yml</code> workflow shown below. This workflows requires the URI connection string to the MongoDB database, as well as the</p> <pre><code>name: \ud83d\udce6 Make Backups\non:\n    # Schedule updates (once every week)\n    schedule:\n        - cron: \"0 0 * * 0\"\n    push:\n        branches: [\"main\"]\n    workflow_dispatch:\n\nenv:\n    MONGODB_TOOLS_DOWNLOAD: https://fastdl.mongodb.org/tools/db/mongodb-database-tools-ubuntu2204-x86_64-100.6.1.tgz\n    BACKEND_UPLOADS_DIR: /root/rucogs.github.io-backend/uploads/\n\njobs:\n    mongodb-backup:\n        name: MongoDB Backup\n        runs-on: ubuntu-22.04\n        steps:\n            - name: Install MongoDB database tools\n              run: |\n                  curl -fLo mongodb-tools.tgz ${{ env.MONGODB_TOOLS_DOWNLOAD }}\n                  mkdir mongodb-tools\n                  tar -zxvf mongodb-tools.tgz --strip-components 1 -C mongodb-tools\n                  cd mongodb-tools/bin\n                  cp * /usr/local/bin/\n\n            - name: Make dump\n              run: mongodump --uri=\"${{ secrets.MONGO_URI }}\"\n\n            - name: Zip dump\n              run: 7z a mongodump.zip dump\n\n            - name: Upload artifact\n              uses: actions/upload-artifact@v3\n              with:\n                  name: mongodump\n                  path: mongodump.zip\n\n    uploads-backup:\n        name: Uploads Backup\n        runs-on: ubuntu-latest\n        steps:\n            - name: Download uploads folder\n              run: sshpass -p \"${{ secrets.BACKEND_ROOT_PASS }}\" scp -o StrictHostKeyChecking=no -r \"${{ secrets.BACKEND_URI }}:${{ env.BACKEND_UPLOADS_DIR }}\" ./uploads\n\n            - name: Zip uploads\n              run: 7z a uploads.zip uploads\n\n            - name: Upload artifact\n              uses: actions/upload-artifact@v3\n              with:\n                  name: uploads\n                  path: uploads.zip\n                  retention-days: 1\n\n    create-release:\n        needs: [mongodb-backup, uploads-backup]\n        name: Create Release\n        runs-on: ubuntu-latest\n        outputs:\n            tag: ${{ steps.create-tag.outputs.tag }}\n        steps:\n            - name: Create date\n              id: create-date\n              run: echo \"date=$(date +'%Y-%m-%d(%H-%M-%S)')\" &gt;&gt; $GITHUB_OUTPUT\n\n            - name: Create tag\n              id: create-tag\n              run: echo \"tag=backup-${{ steps.create-date.outputs.date }}')\" &gt;&gt; $GITHUB_OUTPUT\n\n            - name: Create Release\n              uses: softprops/action-gh-release@v1\n              with:\n                  token: ${{ secrets.GITHUB_TOKEN }}\n                  tag_name: ${{ steps.create-tag.outputs.tag }}\n                  name: Backup ${{ steps.create-date.outputs.date }}\n                  body: |\n                      Backed up to ready to go! \ud83d\ude80\n                  draft: false\n                  prerelease: false\n\n    upload-release-artifacts:\n        needs: create-release\n        name: Upload Release Artifacts\n        runs-on: ubuntu-latest\n        strategy:\n            matrix:\n                artifact_name: [mongodump, uploads]\n        steps:\n            - name: Download Artifact\n              uses: actions/download-artifact@v3\n              with:\n                  name: ${{ matrix.artifact_name }}\n                  path: ./\n\n            - name: Upload Artifact to Release\n              id: upload-release-asset\n              uses: softprops/action-gh-release@v1\n              with:\n                  token: ${{ secrets.GITHUB_TOKEN }}\n                  tag_name: ${{ needs.create-release.outputs.tag }}\n                  files: ./${{ matrix.artifact_name }}.zip\n</code></pre>"},{"location":"devops/ci_cd/#configuration","title":"Configuration","text":""},{"location":"devops/ci_cd/#environment-variables","title":"Environment Variables","text":"<p>Non-sensitive configuration can be done in the workflow file itself</p> <ul> <li><code>MONGODB_TOOLS_DOWNLOAD</code> - A environment variable that links to a download for <code>mongodump</code>, a tool that can dump the contents of the database into a file.     We use this to create a backup of the MongoDB database hosted on MongoDB Atlas.</li> <li><code>BACKEND_UPLOADS_DIR</code> - A environment variable that holds the absolute path to directory of the uploads folder within the backend server.</li> <li><code>cron: \"0 0 * * 0\"</code> - Sets up a the backup action to run every month using a cron expression. You can use crontab.guru to build a cron expression.     At the moment it runs the action at 00:00 on Sundays.</li> </ul>"},{"location":"devops/ci_cd/#secrets","title":"Secrets","text":"<p>Sensitive information is stored as a repository secret on our GitHub repository. Here is a list of the follow secrets that can be configured</p> <ul> <li><code>MONGO_URI</code> - The MongoDB connection string used to connect to our <code>MainDB</code> database</li> <li><code>BACKEND_URI</code> - The ssh connection string to the backend. It's typically <code>root@123.45.678</code> where <code>123.45.678</code> represents your server's IP address.</li> <li><code>BACKEND_ROOT_PASS</code> - The password of the backend for the user you specified in the <code>BACKEND_URI</code>.</li> </ul>"},{"location":"devops/database/","title":"Database","text":""},{"location":"devops/database/#recommended-reading","title":"Recommended Reading","text":"<ul> <li>What is a Database?</li> <li>Introduction to MongoDB<ul> <li>Explains the overall structuring of MongoDB a NoSQL database</li> <li>Ex. documents make up collections, which make up databases.</li> </ul> </li> <li>SQL Tutorial - Full Database Course for Beginners<ul> <li>Despite using MongoDB, a NoSQL database, we are still using the database like a traditional SQL one. We use collections as tables, and documents with fixed fields.</li> </ul> </li> </ul>"},{"location":"devops/database/#overview","title":"Overview","text":"<p>We use MongoDB as our database. Specifically, we use MongoDB's cloud database service called MongoDB Atlas. MongoDB Atlas provides a cluster of databases, so it adds a layer of redundancy in case one database fails. We have a <code>RUCOGS</code> organization on Atlas. Underneath Atlas we have a <code>rucogs.github.io</code> project, and within that is <code>MainDB</code> -- our entire database. We currently use the free-tier of MongoDB, which gives us 512 MB of free storage.</p> <p>Files are not stored on databases, since that would be wasteful. Instead, files are often uploaded to dedicated servers, with database entries only containing a link that can fetch the file from the server. The files for our backend are stored within the backend. See backend section for more information.</p>"},{"location":"devops/database/#database-schema","title":"Database Schema","text":"<p>Note</p> <p>It's important to pass on access of the database as new Webmasters replace old ones.</p> <p>Members with access to Database as of 4/2/24:</p> <ul> <li>Nihal Pinto (Discord: <code>illuminoeye_gaming</code>)</li> </ul>"},{"location":"devops/hosting/","title":"Hosting","text":""},{"location":"devops/hosting/#recommended-reading","title":"Recommended Reading","text":"<ul> <li>Remote Development using SSH on VSCode<ul> <li>If you already use VSCode for development, using VSCode's ssh extension streamlines the experience of connecting your server.</li> <li>Once connected you can drag files into your VSCode file system to upload them, right click files to download, and perform all of VSCode's normal features (editing files, using the terminal, etc).</li> </ul> </li> <li>The Linux Command Line for Beginners</li> <li>How to Use Systemctl</li> </ul>"},{"location":"devops/hosting/#overview","title":"Overview","text":"<p>After developing software we need to host it on a server. It's recommended to host on a cloud platform, so you don't need to worry about hardware maintenance of the server. Most cloud platforms run on the Linux operating system since it's free and open-source. This article will go over hosting on a Linux platform.</p> <p>It's recommended to host the server on Linode, since their cheapest option is a <code>Nanode</code>, which charges $5 a month.</p> <p>Note</p> <p>Currently, the club hosts the backend on a Nanode under a Linode account registered with the rutgerscogs@gmail.com account. If you're the current webmaster, please ensure you have access to this account.</p>"},{"location":"devops/hosting/#service-management","title":"Service Management","text":"<p>First you need to get the built files for the backend and discord bot onto your server. If your server is powerful enough, you can clone the repository onto the the server itself and then run a build there. Otherwise, you can build them locally on your machine, and then upload them to the server.</p> <ul> <li>Discord bot repository</li> <li>Backend repository</li> </ul> <p>On Linux, there is a <code>systemd</code> or \"System Daemon\" program that's in charge of starting, stopping, and restarting processes. We use <code>systemd</code> to run the backend, discord-bot, and music bots since it allows these services to always be up -- even if they crash, they will restart themselves automatically. To manage these <code>systemd</code> services, we will use the <code>systemctl</code> or \"System Control\", which is a command-line tool to interact with <code>systemd</code>. Using <code>systemctl</code>, we can enable/disable the services managed by <code>systemd</code>.</p> <p>Note that both the backend and discord bot repositories have a <code>.service</code> file in them. Make sure you have these files on your server as well. By default, these service files assume you cloned the repositories on your root directory, and that you've built a production version of the repositories on the server itself. This means the <code>.serivce</code> files expect the built files for each backend application to be stored in a <code>dist</code> folder underneath each backend application's repository. If you decide to place the built files in a different location, don't forget to change the file paths in each of the service files.</p> <p>Below is a visualization of how this guide expects the various repository folders to be set up. Note that some files are omitted for brevity.</p> <pre><code>/root\n\u251c\u2500 rucogs-discord-bot\n\u2502  \u251c\u2500 dist\n\u2502  \u2502  \u2514\u2500 BUILT FILES FOR DISCORD BOT\n\u2502  \u2514\u2500 rucogs-discord.service\n\u251c\u2500 rucogs-music\n\u2502  \u251c\u2500 BUILT FILES FOR MUSIC\n\u2502  \u2514\u2500 rucogs-music.service\n\u2514\u2500 rucogs.github.io-backend\n   \u2514\u2500 dist\n   \u2502  \u2514\u2500 BUILT FILES FOR BACKEND\n   \u2514\u2500 rucogs.service\n</code></pre> <p>To make <code>.service</code> files visible to <code>systemd</code>, it must be placed within the <code>/etc/systemd/system/</code> folder. However instead of moving the files, you can instead create a \"symbolic link\" for each <code>.service</code> file, and place each link inside the <code>/etc/systemd/system/</code> folder. Symbolic links in Linux are similar to shortcuts on Windows, and act as \"pointers\" to files. By having a symbolic link to our service files, we don't need to dig through the <code>/etc/systemd/system/</code> folder to find the service files whenever we want to edit them. Instead, we can access them directly from each repository folder, which is very convenient.</p> <p><code>systemctl</code> can actually create a symbolic link for us inside of the <code>/etc/systemd/system</code> folder. This is done by running the following command.</p> <pre><code>systemctl enable /root/path/to/myservice.service\n</code></pre> <p>Note</p> <p>For example, if you wanted to add the <code>rucogs.service</code>, you can run</p> <pre><code>systemctl enable /root/rucogs.github.io-backend/rucogs.service\n</code></pre> <p>Note that enabling a service will also ensure the service starts whenever the computer boots up. This can ensure you're services are always online, event after your cloud server has rebooted due to a crash or periodic maintenance.</p> <p>Finally, you can start it manually by navigating to the directory containing the service file and then running</p> <pre><code>systemctl start myservice\n</code></pre> <p>Note</p> <p>So in order to start the backend and discord bots, you need to navigate to the directory containing <code>rucogs.service</code> and run</p> <pre><code>systemctl start rucogs\n</code></pre> <p>Then navigate to the directory containing <code>rucogs-discord.service</code> and run</p> <pre><code>systemctl start rucogs-discord\n</code></pre> <p>To check the status of a service and view it's output, you can do</p> <pre><code>systemctl status myservice\n</code></pre> <p>To restart a service, you can do</p> <pre><code>systemctl restart myservice\n</code></pre> <p>Note</p> <p>The <code>rucogs.service</code> and <code>rucogs-discord.service</code> files are configured to restart themselves if they ever crash.</p> <p>To setup the music bot, follow the instructions on the JMusicBot wiki. This site includes information on setting up a <code>.service</code> file for the bot.</p> <p>Note</p> <p>You may need to install the required dependencies on your server to get the services to run. Both <code>rucogs</code> and <code>rucogs-discord</code> services require Node.js and the music bot requires Java.</p>"},{"location":"devops/hosting/#config-files","title":"Config Files","text":"<p>The backend and discord bot applications both read data from special <code>config.json</code> files under their <code>src/config/</code> folders. The <code>src/config/</code> folders are located underneath the root of each repository. These config files contain sensitive information, and are excluded from the GitHub repositories by default. Please ensure these config files are set up properly. The documentation on the config files are linked below.</p> <ul> <li>Backend Config</li> <li>Discord-Bot Config</li> </ul>"},{"location":"devops/hosting/#linode-mailing-setup","title":"Linode Mailing Setup","text":"<p>By default, Linode blocks mail ports to prevent spam. If you are using Linode for your server hosting, please make sure to open a support ticket to request mail port access. You should explain to the support team that you need the mailing port to host a backend for the game development club at Rutgers University, which may send mail to club members for identity verification purposes. They should lift the mail port ban in a few business-days after seeing your request.</p>"},{"location":"devops/hosting/#nginx","title":"NGINX","text":"<p>NGINX is a web server designed for use cases involving high volumes of traffic, and it\u2019s a popular, lightweight, high-performance solution. We can use NGINX to setup SSL/TLS certificates, as well use it as a proxy server to forward traffic from specific URL locations to our running services.</p> <p>For example instead of having to connect to our backend service using a port with <code>mydomain.com:8000</code>, you can use <code>mydomain.com/rucogs/backend</code> to connect to the server.</p> <p>Please check of the following guides to set up NGINX:</p> <ul> <li>setting up NGINX in an Ubuntu 20.04 Linode</li> <li>Beginner's Guide to NGINX</li> <li>Sites Enabled with NGINX or Apache</li> </ul> <p>Here's an example NGINX <code>conf</code> file used by Alan to host the backend on his personal website at atlinx.net. It's stored underneath the <code>site-enabled</code> directory of NGINX.</p> <pre><code># /etc/nginx/sites-enabled/default\nserver {\n    server_name backend.cogs.club www.cogs.club;\n\n    root /var/www/html;\n\n    location /backend/ {\n        proxy_pass http://localhost:3000/;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"upgrade\";\n\n        client_max_body_size 100M;\n    }\n\n    listen [::]:443 ssl ipv6only=on; # managed by Certbot\n    listen 443 ssl; # managed by Certbot\n    ssl_certificate /etc/letsencrypt/live/backend.cogs.club/fullchain.pem; # managed by Certbot\n    ssl_certificate_key /etc/letsencrypt/live/backend.cogs.club/privkey.pem; # managed by Certbot\n    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot\n    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot\n\n}\n\nserver {\n    if ($host = www.backend.cogs.club) {\n        return 301 https://$host$request_uri;\n    } # managed by Certbot\n\n    if ($host = backend.cogs.club) {\n        return 301 https://$host$request_uri;\n    } # managed by Certbot\n\n    listen 80;\n    listen [::]:80;\n    server_name backend.cogs.club www.backend.cogs.club;\n\n    return 404; # managed by Certbot\n}\n</code></pre>"},{"location":"devops/hosting/#lets-encrypt","title":"Lets Encrypt","text":"<p>An important part of setting up the server is getting SSL/TLS certificates. These certificates let you encrypt traffic to the server, making communication more secure. Sites that have SSL/TLS certificates will show a lock icon in the browser when connecting to them. If you are using NGINX, you can follow this NGINX guide on setting up Let's Encrypt..</p> <p>Note</p> <p>It's important to pass on hosting of the backend as new Webmasters replace old ones.</p> <p>Member who is paying for the backend and discord bot as of 5/27/23:</p> <ul> <li>Alan Tong (Linode Nanode - $5 a month) (Discord: <code>atlinx</code>)</li> </ul> <p>Note</p> <p>It's important to ensure we have access to the cogs.club domain.</p> <p>Alumni who currently owns the cogs.club domain:</p> <ul> <li>Harry Stern (Discord: <code>ohmyachingtentacles</code>)</li> </ul>"},{"location":"discord-bot/","title":"Discord Bot","text":""},{"location":"discord-bot/#recommended-reading","title":"Recommended Reading","text":"<ul> <li>Node.js Tutorial for Beginners</li> <li>Discord JS Introduction</li> </ul>"},{"location":"discord-bot/#overview","title":"Overview","text":"<p>The discord bot is built on Node.JS with Discord.JS using TypeScript. GraphQL is used to communicate with the backend.</p> <p>Tools:</p> <ul> <li>Node.JS - An asynchronous event-driven JavaScript runtime that lets you build network applications.</li> <li>Apollo GraphQL - A GraphQL client/server library</li> <li>Discord.JS - A Discord bot framework for NodeJS that can interact with the Discord API</li> </ul>"},{"location":"discord-bot/#contents","title":"Contents","text":"<ul> <li>Config</li> <li>Structure</li> </ul>"},{"location":"discord-bot/config/","title":"Config","text":"<p>The behavior of the discord bot is determined by config files located underneath <code>src/config</code>. Config files end in <code>.config.json</code>, and are automatically ignored by the repository's <code>.gitignore</code> to avoid leaking sensitive information into the git commit history.</p> <p>There are two config files needed:</p> <ul> <li><code>auth.config.json</code></li> <li><code>server.config.json</code></li> </ul> <p>The repository provides templates files ending in <code>.config.template.json</code> for the two types of config files. To make a real config file, duplicate a template and remove the <code>.template</code> part of the config file's name.</p>"},{"location":"discord-bot/config/#auth-config","title":"Auth config","text":"<ul> <li><code>type</code> - The type of server this config file is for. It can be set to either <code>\"production\"</code> or <code>\"debug\"</code>. If you are using <code>\"debug\"</code>, make sure to also name the config as <code>auth.debug.config.json</code>.</li> <li><code>backendRootUser</code> - The user credentials used to log into the backend for full API access<ul> <li><code>username</code> - Username of the root user</li> <li><code>password</code> - Password of the root user</li> </ul> </li> <li><code>bot</code> - Settings for the Discord bot<ul> <li><code>clientId</code> - Discord bot client ID. You can find this on the Discord developers dashboard on the COGS discord account.</li> <li><code>guildId</code> - The id of the guild the bot is operating in. For the debug config this should be set to the COGS Test Server, while for the production config it should be set to the official COGS Server.</li> <li><code>token</code> - Discord bot client secret. You ask an existing webmaster for the secret.</li> </ul> </li> </ul>"},{"location":"discord-bot/config/#server-config","title":"Server Config","text":"<ul> <li><code>type</code> - The type of server this config file is for. It can be set to either <code>\"production\"</code> or <code>\"debug\"</code>. If you are using <code>\"debug\"</code>, make sure to also name the config as <code>server.debug.config.json</code>.</li> <li><code>backendDomain</code> - The domain for the backend.</li> <li><code>cdnDomain</code> - The domain for the CDN.</li> <li><code>cdnHttpsPrefix</code> - Https prefix for the CDN domain. This can be set to <code>http://</code> or <code>https://</code>.</li> <li><code>httpsPrefix</code> - Https prefix for the backend domain. This can be set to <code>http://</code> or <code>https://</code>.</li> <li><code>wssPrefix</code> - WebSocket prefix for the backend domain. This can be set to <code>ws://</code> or <code>wss://</code>.</li> <li><code>cdnRelativePath</code> - The path of the CDN relative to the <code>cdnDomain</code>.</li> <li><code>dynamicCdnRelativePath</code> - The path for getting dynamically generated images from the CDN, relative to the <code>cdnDomain</code>.</li> <li><code>graphqlRelativePath</code> - The path to the GraphQL endpoint relative to the <code>backendDomain</code>.</li> <li><code>selfHostedPrefix</code> - Prefix for indicated an image is self-hosted. By default it's <code>cdn://</code></li> <li><code>archiveCategoryId</code> - Id of the archive category of the discord server that the bot is operating in. The discord server the bot is operating in is specified by the Auth config.</li> </ul>"},{"location":"discord-bot/config/#examples","title":"Examples","text":"<p>Since the server config doesn't contain any sensitive information, the configs used for production and debugging are shown below:</p> <p>server.config.json</p> <pre><code>{\n    \"type\": \"production\",\n    \"backendDomain\": \"localhost:3000\",\n    \"cdnDomain\": \"atlinx.net/rucogs/backend\",\n    \"cdnHttpsPrefix\": \"https://\",\n    \"httpsPrefix\": \"http://\",\n    \"wssPrefix\": \"ws://\",\n    \"cdnRelativePath\": \"/cdn\",\n    \"dynamicCdnRelativePath\": \"/cdn/dynamic\",\n    \"graphqlRelativePath\": \"/graphql\",\n    \"selfHostedPrefix\": \"cdn://\",\n    \"archiveCategoryId\": \"804127935987843083\"\n}\n</code></pre> <p>server.config.debug.json</p> <pre><code>{\n    \"type\": \"debug\",\n    \"backendDomain\": \"localhost:3000\",\n    \"cdnDomain\": \"localhost:3000\",\n    \"cdnHttpsPrefix\": \"http://\",\n    \"httpsPrefix\": \"http://\",\n    \"wssPrefix\": \"ws://\",\n    \"cdnRelativePath\": \"/cdn\",\n    \"dynamicCdnRelativePath\": \"/cdn/dynamic\",\n    \"graphqlRelativePath\": \"/graphql\",\n    \"selfHostedPrefix\": \"cdn://\",\n    \"archiveCategoryId\": \"799858313835708446\"\n}\n</code></pre>"},{"location":"discord-bot/structure/","title":"Structure","text":""},{"location":"discord-bot/structure/#folder-structure","title":"Folder Structure","text":"<ul> <li><code>src</code> - Contains<ul> <li><code>server.ts</code> - The entry point of the discord bot. It reads the command line arguments or environment variables to start a server in development or production mode.</li> <li><code>config</code> - Stores config files that change how the discord bot runs. See the Config section for more information</li> <li><code>commands</code> - Contains code for slash commands. Each slash command is represented by a script that exports a <code>Command</code> object, which defines the command and the handlers for it. Note that sub commands are handled manually by each command script.</li> <li><code>_tools</code> - Contains code used by Node.JS scripts defined in our <code>package.json</code>.</li> <li><code>generated</code> - Auto-generated code based on our GraphQL schema</li> <li><code>misc</code> - Contains miscellaneous helper code</li> <li><code>shared</code> - Code that's shared between the backend and frontends</li> </ul> </li> <li><code>dist</code> - Where the release version of the discord bot is stored once you build it.</li> <li><code>gulpfile.js</code> - Script that automates copying assets over when you build the discord bot.</li> <li><code>rucogs-discord.service</code> - Service file for hosting discord bot. See DevOps/Hosting for more information.</li> <li><code>tsconfig.json</code> - Configuration for TypeScript</li> </ul>"},{"location":"discord-bot/structure/#nodejs-scripts","title":"NodeJS Scripts","text":"<ul> <li><code>start</code> - Runs the built discord bot from the <code>dist</code> folder.</li> <li><code>start:recompile</code> - Compiles the discord bot and then runs it.</li> <li><code>start:rebuild</code> - Regenerates and recompiles the discord bot, and then runs it.</li> <li><code>compile:app</code> - Cleans the <code>dist</code> directory and recompiles the discord bot.</li> <li><code>compile:tools</code> - Cleans the <code>dist</code> directory and recompile the discord bot in tool mode, which basically includes the <code>src/_tools</code> folder in the final build.</li> <li><code>clean</code> - Deletes the <code>dist</code> directory.</li> <li><code>deploy-commands:production</code> - Deploys the slash commands to the server specified by the <code>auth.config.json</code> file. See the Auth Config section for more information.</li> <li><code>deploy-commands:development</code> - Deploys the slash commands to the server specified by the <code>auth.debug.config.json</code> file. See the Auth Config section for more information.</li> <li><code>build</code> - Cleans the <code>dist</code> directory, regenerates the autogenerated code, and then recompiles the discord bot.</li> <li><code>generate</code> - Assuming you are developing under the <code>rucogs-infrastructure</code> mono-repo, this copies the generated code from the backend submodule's folder.</li> </ul> <p>Note</p> <p>To run a NodeJS script you have to run the follow code inside the repository's directory.</p> <pre><code>&gt; npm run script_name\n</code></pre>"},{"location":"music-bot/","title":"Music Bot","text":""},{"location":"music-bot/#overview","title":"Overview","text":"<p>The music bot uses jagrosh's open-source MusicBot code. Their wiki site contains a setup guide, which also explains how to host the bot as a service on your server.</p>"},{"location":"website/","title":"Website","text":""},{"location":"website/#recommended-reading","title":"Recommended Reading","text":"<ul> <li>Introduction to Angular<ul> <li>Angular Tour of Heroes Tutorial</li> </ul> </li> <li>Learn GraphQL</li> <li>Apollo GraphQL Documentation</li> </ul>"},{"location":"website/#overview","title":"Overview","text":"<p>The website is built on Angular using TypeScript. GraphQL is used to communicate with the backend.</p> <p>Tools:</p> <ul> <li>GraphQL - An alternative communication method to REST, that allows users of the API to query exactly the data they need.</li> <li>Angular - A frontend framework for building single-page applications and websites</li> <li>Apollo GraphQL - A GraphQL client/server library</li> </ul>"},{"location":"website/#resources","title":"Resources","text":"<ul> <li>COGS Website Guide.</li> </ul>"},{"location":"website/#contents","title":"Contents","text":"<ul> <li>Config</li> <li>Structure</li> <li>Managing Events</li> <li>Writing Blog Articles</li> <li>Uploading Pictures</li> </ul>"},{"location":"website/blog/","title":"Writing Blog Articles","text":"<p>The website has a Blog page that hosts articles written by COGS. Articles on the blog page are written in Markdown, which lets you add headings, bold, italics, tables, images, code blocks, lists and blockquotes.</p> <p>To add an article, follow the steps below:</p>"},{"location":"website/blog/#prerequisites","title":"Prerequisites","text":"<ol> <li>Make sure you have Python installed on your computer.</li> <li>Make sure you have Git installed on your computer.</li> <li> <p>Clone the website GitHub repository locally if you don't have it already</p> <pre><code>&gt; git clone https://github.com/rucogs/rucogs.github.io\n</code></pre> </li> <li> <p>Inside the repository folder, install the python packages using</p> <pre><code>&gt; pip install -r requirements.txt\n</code></pre> </li> </ol>"},{"location":"website/blog/#steps","title":"Steps","text":"<ol> <li> <p>Add an article to the <code>src/assets/blog-page-articles</code> folder.</p> <ol> <li>This article should end in <code>.md</code> and should have a descriptive filename.</li> <li>Make sure to place in the article in the correct folder based on it's year. If the folder doesn't exist, feel free to create it.</li> <li> <p>After making the file, copy and paste the following metadata to the top of the file, and change it according to what your article is about:</p> <pre><code>&lt;!--\n    Title:          Article Title\n    Description:    Description of the article\n    Date:           January 1, 2023\n    Image:          assets/images/banner.png\n    Authors:        Alexander Xie, Alan Tong\n    Tags:           Club, Article\n--&gt;\n</code></pre> <ul> <li><code>Title</code> - Title of the article</li> <li><code>Description</code> - Description of the article</li> <li><code>Date</code> - Date the article was written</li> <li><code>Image</code> - Image to use as the banner image on top of the article</li> <li><code>Authors</code> - Comma-separated list of authors for the article</li> <li><code>Tags</code> - Comma-separated list of tags for the article<ul> <li>There is no official list of tags, but please try to reuse existing tags listed in other articles when possible.</li> </ul> </li> </ul> </li> </ol> </li> <li> <p>Run the following command to refresh the website's articles</p> <pre><code>&gt; py update_articles.py\n</code></pre> </li> <li> <p>Commit and push your changes to GitHub</p> <pre><code>&gt; git add .\n&gt; git commit -m \"Description of changes, etc.\"\n&gt; git push\n</code></pre> </li> </ol>"},{"location":"website/config/","title":"Config","text":"<p>The behavior of the website is determined by <code>src/_settings.ts</code> file.</p> <ul> <li><code>SettingsService</code><ul> <li><code>General</code> - General settings.<ul> <li><code>pageLinks</code> - Array of page links that will be shown on the header navigation bar. Commenting out a page link hides it from the navigation bar.</li> <li><code>instagramLink</code> - Link to the COGS Instagram page.</li> <li><code>twitterLink</code> - Link to the COGS Twitter page.</li> <li><code>discordLink</code> - Invite link to the COGS Discord server.</li> <li><code>mailingListLink</code> - Link to signup for the COGS mailing list.</li> <li><code>icons</code> - Imported icons to be registered for use in <code>mat-icon</code> components.</li> <li><code>defaultAvatarSrc</code> - Link to the the default user avatar image.</li> <li><code>defaultCardImageSrc</code> - Link to the default project card image.</li> </ul> </li> <li><code>Backend</code> - Backend settings.<ul> <li><code>backendDomain</code> - Domain the backend is hosted on.</li> <li><code>backendRelativeBaseUrl</code> - Relative path to the backend from the <code>backendDomain</code>.</li> <li><code>graphQLRelativePath</code> - Relative to the GraphQL endpoint from the <code>backendDomain</code>.</li> <li><code>selfHostedPrefix</code> - Prefix that indicates whether a file is self-hosted on the backend or not.</li> <li><code>cdnRelativePath</code> - Relative path to the CDN from the <code>backendDomain</code>.</li> </ul> </li> </ul> </li> </ul>"},{"location":"website/events/","title":"Managing Events","text":""},{"location":"website/events/#prerequisites","title":"Prerequisites","text":"<ol> <li>Make sure you have Python installed on your computer.</li> <li>Make sure you have Git installed on your computer.</li> <li> <p>Clone the website GitHub repository locally if you don't have it already</p> <pre><code>&gt; git clone https://github.com/rucogs/rucogs.github.io\n</code></pre> </li> </ol>"},{"location":"website/events/#event-page-template","title":"Event Page Template","text":"<p>Event pages tend to follow the same template, with a count down, a signup form, and an itinerary. Settings for the event are stored on the event page's component itself. Events also might have an event banner associated with it, which is displayed on the homepage of the website. </p> <p>Event banners can be enabled/disabled by commenting/uncommentiing the <code>&lt;app-event-header&gt;&lt;/app-event-header&gt;</code> in <code>src\\app\\pages\\home\\home\\home-page.component.html</code>. The contents of the event banner are found in the <code>src\\app\\modules\\_core\\event-header\\event-header.component.html</code> file.</p> <p>Variables</p> <ul> <li><code>startDate</code> - Start date of the event</li> <li><code>eventActive</code> - Whether the event is in progress or not.<ul> <li>If <code>false</code>, a timer will be shown that counts down to the kickoff date and time.</li> <li>If  <code>true</code>, then the <code>itchioLink</code> will be displayed, and the signup form will be renamed to \"Late Signup Form\".</li> </ul> </li> </ul> <p>Sections</p> <ul> <li><code>Header</code> section<ul> <li>This is usually controlled by variables on the event page's component</li> </ul> </li> <li><code>Itinerary</code> section<ul> <li>Displays the itinerary for the game jam.</li> <li>Each itinerary entry is displayed as an <code>app-event-card</code>, and has a main section and a Google Maps embed.</li> <li>Make sure the Google Maps <code>iframe</code> embed has it's <code>src</code> attribute filled out to the correct value.<ul> <li>This <code>src</code> value can be obtained by going to Google Maps</li> <li>Finding the location of the event</li> <li>Clicking on Share -&gt; Embed a map</li> <li>Copy the string from the <code>src</code> section of the <code>iframe</code> that Google Maps generates for you.</li> </ul> </li> </ul> </li> <li><code>FAQ</code> section<ul> <li>Displays frequently asked questions.</li> <li>Feel free to add or remove questions as needed.</li> </ul> </li> </ul>"},{"location":"website/events/#scarlet-game-jam","title":"Scarlet Game Jam","text":"<ol> <li>Uncomment the <code>&lt;app-event-header&gt;&lt;/app-event-header&gt;</code> in <code>src\\app\\pages\\home\\home\\home-page.component.html</code></li> <li>Ensure <code>src\\app\\modules\\_core\\event-header\\event-header.component.html</code> has the scarlet game jam <code>app-section</code> uncommented.</li> <li>Uncomment the Scarlet Game Jam PageLink in <code>src/_settings.ts</code> </li> <li> <p>Open <code>src\\app\\pages\\scarlet-game-jam\\scarlet-game-jam\\scarlet-game-jam-page.component.ts</code></p> <ul> <li>Edit the variables of the component to the correct values</li> </ul> <p>Variables</p> <ul> <li><code>startDate</code> - Start date of the event</li> <li><code>endDate</code> - End date of the event</li> <li><code>startDateTime</code> - Time interval of the kickoff event during the startDate</li> <li><code>endDateTime</code> - Time interval of the closing ceremony during the endDate</li> <li><code>merchLink</code> - Link to the merch store</li> <li><code>signupLink</code> - Link to the game jam signup form</li> <li><code>itchioLink</code> - Link to the game jam Itch.io page</li> <li><code>startDateEventPage</code> - GetInvolved event page for the kickoff event</li> <li><code>endDateEventPage</code> - GetInvolved event page for the closing ceremony</li> <li><code>eventActive</code> - Whether the event is in progress or not.<ul> <li>If <code>false</code>, a timer will be shown that counts down to the kickoff date and time.</li> <li>If  <code>true</code>, then the <code>itchioLink</code> will be displayed, and the signup form will be renamed to \"Late Signup Form\".</li> </ul> </li> </ul> </li> <li> <p>Tweak the <code>scarlet-game-jam-page.component.html</code> to your needs</p> <p>Sections</p> <ul> <li><code>Collaborations</code> section<ul> <li>Displays collaborations with other clubs and organizations if there is any.</li> <li>Comment out collaborations that don't exist and feel free to comment out the entire section if there are no collaborations.</li> </ul> </li> <li><code>Itinerary</code> section<ul> <li>Displays the itinerary for the game jam.</li> <li>See Event Page Template.</li> </ul> </li> <li><code>Merch</code> section<ul> <li>Displays the merch link.</li> </ul> </li> <li><code>FAQ</code> section<ul> <li>Displays frequently asked questions.</li> <li>See Event Page Template.</li> </ul> </li> </ul> </li> </ol>"},{"location":"website/events/#global-game-jam","title":"Global Game Jam","text":"<ol> <li>Uncomment the <code>&lt;app-event-header&gt;&lt;/app-event-header&gt;</code> in <code>src\\app\\pages\\home\\home\\home-page.component.html</code></li> <li>Ensure <code>src\\app\\modules\\_core\\event-header\\event-header.component.html</code> has the global game jam <code>app-section</code> uncommented.</li> <li>Uncomment the Global Game Jam PageLink in <code>src/_settings.ts</code></li> <li> <p>Open <code>web\\src\\app\\pages\\global-game-jam\\global-game-jam\\global-game-jam-page.component.ts</code></p> <ul> <li>Edit the variables of the component to the correct values</li> </ul> <p>Variables</p> <ul> <li><code>startDate</code> - Start date and time of the event</li> <li><code>eventActive</code> - Whether the event is in progress or not<ul> <li>If <code>false</code>, a timer will be shown that counts down to the kickoff date and time.</li> <li>If  <code>true</code>, then the Itch.io Link will be displayed, and the signup form will be renamed to \"Late Signup Form\".</li> </ul> </li> <li><code>signupLink</code> - Link to the Global Game Jam signup form</li> <li><code>siteLink</code> - Link to the Global Game Jam site link</li> </ul> </li> <li> <p>Tweak the <code>global-game-jam-page.component.html</code> to your needs</p> <p>Sections</p> <ul> <li><code>Itinerary</code> section<ul> <li>Displays the itinerary for the game jam.</li> <li>See Event Page Template.</li> </ul> </li> <li><code>FAQ</code> section<ul> <li>Displays frequently asked questions.</li> <li>See Event Page Template.</li> </ul> </li> </ul> </li> </ol>"},{"location":"website/events/#new-events","title":"New Events","text":"<p>If you need to make a new event page feel free to base it off of the Scarlet Game Jam event page.</p>"},{"location":"website/pictures/","title":"Uploading Pictures","text":"<p>The website has a picture page that display pictures of past events at COGS. To upload pictures to this page, follow the steps below:</p>"},{"location":"website/pictures/#prerequisites","title":"Prerequisites","text":"<ol> <li>Make sure you have Python installed on your computer.</li> <li>Make sure you have Git installed on your computer.</li> <li> <p>Clone the website GitHub repository locally if you don't have it already</p> <pre><code>&gt; git clone https://github.com/rucogs/rucogs.github.io\n</code></pre> </li> <li> <p>Inside the repository folder, install the python packages using</p> <pre><code>&gt; pip install -r requirements.txt\n</code></pre> </li> </ol>"},{"location":"website/pictures/#steps","title":"Steps","text":"<ol> <li> <p>Upload pictures to the <code>src/assets/pictures-page-images</code> folder</p> <ul> <li>Make sure to place in the image in the correct folder based on it's year and then semester</li> <li>If the folder doesn't exist, feel free to create it.</li> </ul> </li> <li> <p>Run the following command. This will add the images to the website as well as generate preview thumbnails for the images</p> <pre><code>&gt; py update_images.py\n</code></pre> </li> <li> <p>Commit and push your changes to GitHub</p> <pre><code>&gt; git add .\n&gt; git commit -m \"Description of changes, etc.\"\n&gt; git push\n</code></pre> </li> </ol>"},{"location":"website/structure/","title":"Structure","text":""},{"location":"website/structure/#folder-structure","title":"Folder Structure","text":"<ul> <li><code>src</code> - Contains<ul> <li><code>app</code> - Where the code is stored<ul> <li><code>classes</code> - Custom classes</li> <li><code>modules</code> - Custom modules that each hold components</li> <li><code>pages</code> - Pages on the site</li> <li><code>services</code> - Services used by the site</li> <li><code>settings</code> - Website specific settings</li> <li><code>utils</code> - Utility code</li> </ul> </li> <li><code>assets</code> - Where images, articles, and other fixed assets are stored<ul> <li><code>blog-page-articles</code> - Stores articles by year</li> <li><code>icons</code> - Stores COGS logo icons</li> <li><code>images</code> - Stores images</li> <li><code>js</code> - Stores JavaScript</li> <li><code>pictures-page-images</code> - Stores pictures page images by year and semester</li> </ul> </li> <li><code>_server_.ts</code> - The entry point of the website. It reads the command line arguments or environment variables to start a server in development or production mode.</li> </ul> </li> <li><code>dist</code> - Where the release version of the website is stored once you build it.</li> <li><code>angular.json</code> - Configuration for Angular</li> <li><code>tsconfig.json</code> - Configuration for TypeScript</li> <li><code>update_articles.py</code> - Used to add new articles to the blog page. See Writing Blog Articles.</li> <li><code>update_images.py</code> - Used to add new images to the pictures page. See Uploading Pictures.</li> </ul>"},{"location":"website/structure/#nodejs-scripts","title":"NodeJS Scripts","text":"<ul> <li><code>ng</code> - Runs the built website from the <code>dist</code> folder.</li> <li><code>start</code> - Starts a development server to serve the website locally.</li> <li><code>build</code> - Builds the website.</li> <li><code>watch</code> - Builds the website, and the watches for any file changes. If any files are changed the website is rebuilt.</li> <li><code>test</code> - Runs unit tests.</li> <li><code>generate</code> - Assuming you are developing under the <code>rucogs-infrastructure</code> mono-repo, this copies the generated code from the backend submodule's folder.</li> <li><code>selfhosted</code> - Scripts used for hosting the website on a server underneath the <code>rucogs/frontend</code> path.<ul> <li><code>selfhosted:build</code> - Builds the site with a base-href of <code>rucogs/frontend</code>.</li> <li><code>selfhosted:copybuild</code> - Copies the built files to the <code>/var/www/rucogs</code>.</li> <li><code>selfhosted:launch</code> - Runes <code>selfhosted:build</code> then <code>selfhosted:copybuild</code>.</li> </ul> </li> <li><code>pretty</code> - Run the prettier formatter on the TypeScript files within <code>src</code>.</li> </ul> <p>Note</p> <p>To run a NodeJS script you have to run the follow code inside the repository's directory.</p> <pre><code>&gt; npm run script_name\n</code></pre>"}]}